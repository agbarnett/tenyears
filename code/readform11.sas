/****************************************************************/
/*    NAME: readform11.sas                                      */
/*   TITLE: Reads MONICA population data                        */
/*                                                              */
/*   PROCS: EXPAND                                              */
/*    DATA: MONICA form01.txt from CD                           */
/*    DATE: 26th April 2002                                     */
/*  AUTHOR: AGB                                                 */
/*                                                              */
/****************************************************************/

libname data "U:\Research\Projects\ihbi\aushsi\aushsi_barnetta\meta.research\reproducibility.challenge\original_files\data";
%include "U:\Research\Projects\ihbi\aushsi\aushsi_barnetta\meta.research\reproducibility.challenge\original_files\formats.sas";
options nodate mprint nosymbolgen font=swiss;
footnote1(&sysdate., &systime.);

** Read in form11 (demographic) data;
* Age 65 & Age70 as a character as they are sometime missing;
data work.demg(drop=age65x age70x form versn oform oversion infosour sigdate inhabit);
   infile "U:\Research\Projects\ihbi\aushsi\aushsi_barnetta\meta.research\reproducibility.challenge\original_files\data\form11.txt" missover; *<- read directly from CD 'The MONICA archive';
   input form 1-2 versn 3 centre 4-5 runit 6-7 year 8-11 sex 12 oform $ 13-14
      oversion 15 age25 16-21 age30 22-27 age35 28-33 age40 34-39 age45 40-45 
      age50 46-51 age55 52-57 age60 58-63 age65x $ 64-69 age70x $ 70-75 inhabit 76-82
      infosour 83 sigdate 84-91;
   if substr(age65x,1,1)="N" then age65=0;
   else age65=age65x+0;
   if substr(age70x,1,1)="N" then age70=0;
   else age70=age70x+0;
run;
** Restrict and combine centres and units;
data work.comb;
   set work.demg;
* Perth;
    if centre=10 then runit=99;
    if centre=10 then do;
	   if year>=1984 and year<=1993; *<- data considered;
	end;
* Newcastle;
    if centre=11 then runit=99;
    if centre=11 then do;
	   if year>=1985 and year<=1993; *<- data considered;
	end;
* Belgium - Charleroi/Ghent;
    if centre=12 then do;
	   if year>=1983 and year<=1992; *<- data considered;
	end;
* Luxembourg - did not complete;
    if centre=14 then delete;
* Halifax;
    if centre=15 then do;
	   if year>=1984 and year<=1993; *<- data considered;
	end;
* Beijing;
    if centre=17 then do;
	   if year>=1984 and year<=1993; *<- data considered;
	end;
* Czech Republic;
    if centre=18 then runit=99;
    if centre=18 then do;
	   if year>=1984 and year<=1993; *<- data considered;
	end;
* Denmark;
    if centre=19 then do;
	   if year>=1982 and year<=1991; *<- data considered;
	end;
* Finland;
    if centre=20 then do;
	   if year>=1983 and year<=1992; *<- data considered;
	end;
* East Germany;
    if centre=23 then do;
	   if year>=1984 and year<=1993; *<- data considered;
	   if runit in (4,17,19); *<- just use those units that contributed data;
	end;
    if centre=23 then runit=99;
* Germany - Bremen;
    if centre=24 then runit=99;
    if centre=24 then do;
	   if year>=1985 and year<=1992; *<- data considered;
	end;
* Germany - Heidelberg - did not complete;
    if centre=25 then delete;
* Germany - Augsburg;
    if centre=26 then runit=99;
    if centre=26 then do;
	   if year>=1985 and year<=1994; *<- data considered;
	end;
* Hungary - poor quality data;
    if centre=27 then delete;
* Iceland;
    if centre=28 then runit=99;
    if centre=28 then do;
	   if year>=1981 and year<=1994; *<- data considered;
	end;
* Italy - Friuli;
    if centre=32 then runit=99;
    if centre=32 then do;
	   if year>=1984 and year<=1993; *<- data considered;
	end;
* Auckland;
    if centre=33 then do;
	   if year>=1983 and year<=1991; *<- data considered;
	end;
* Belfast;
    if centre=34 then do;
	   if year>=1983 and year<=1993; *<- data considered;
	end;
* Poland - Tarnobrzeg Voivodship;
    if centre=35 then runit=99;
    if centre=35 then do;
	   if year>=1984 and year<=1993; *<- data considered;
	end;
* Poland - Warsaw;
    if centre=36 then runit=99;
    if centre=36 then do;
	   if year>=1984 and year<=1994; *<- data considered;
	end;
* Glasgow;
    if centre=37 then do;
	   if year>=1985 and year<=1994; *<- data considered;
	end;
* Spain;
    if centre=39 then do;
	   if year>=1985 and year<=1994; *<- data considered;
	end;
* Sweden - Gothenburg;
    if centre=40 then do; 
	   if year>=1984 and year<=1994; *<- data considered;
    end;
* USA;
    if centre=43 then do;
	   if year>=1980 and year<=1992; *<- data considered;
	end;
    if centre=43 then runit=99;
* Kaunas;
    if centre=45 then do;
	   if year>=1983 and year<=1992; *<- data considered;
	end;
* Moscow;
    if centre=46 then do; 
	   if year>=1985 and year<=1993; *<- data considered;
	end;
    if centre=46 and runit=1 then runit=97; *<-Control; 
    if centre=46 and runit in (2,3) then runit=98; *<-Intervention; 
* Novosibirsk;
    if centre=47 and runit=1 then do; 
	   if year>=1984 and year<=1993; *<- data considered;
       runit=98; *<-Intervention; 
    end;
    if centre=47 and runit in (3,4) then do; 
	   if year>=1984 and year<=1992; *<- data considered;
       runit=97; *<-Control;
    end;
* Novi Sad;
    if centre=49 then do; 
	   if year>=1984 and year<=1995; *<- data considered;
    end;
* Switzerland;
    if centre=50 then do; 
	   if year>=1985 and year<=1993; *<- data considered;
    end;
* France - Strasbourg;
    if centre=54 then do; 
	   if year>=1985 and year<=1993; *<- data considered;
    end;
* France - Toulouse;
    if centre=55 then do; 
	   if year>=1985 and year<=1993; *<- data considered;
    end;
* Italy - Brianza;
    if centre=57 then do; 
	   if year>=1985 and year<=1994; *<- data considered;
    end;
* France - Lille;
    if centre=59 then do; 
	   if year>=1985 and year<=1994; *<- data considered;
    end;
* Sweden - North;
    if centre=60 then do; 
	   if year>=1985 and year<=1995; *<- data considered;
    end;
    if centre=60 then runit=99;
run;
** Summing population size for each age group across report unit (runit) where appropriate;
* Note age 60 is those aged 60-64;
proc summary data=work.comb(keep=centre runit year sex age35--age60) nway;
   class centre runit year sex;
   var age35--age60;
   output out=work.sumunit sum=age35 age40 age45 age50 age55 age60;
run; 
* Separate male and female data in the population demographics data set;
data work.demgm(drop=sex) work.demgf(drop=sex);
   set work.sumunit(drop=_type_ _freq_);
   if sex=1 then output work.demgm;
   else if centre~=50 then output work.demgf;
run;
* Save as permanent data sets;
data data.demgm; set work.demgm; run;
data data.demgf; set work.demgf; run;

** Get raw coronary event numbers from form01 and calculate age standardized event rate;
*Assign age group to patient onset age and separate the data by sex/fatal;
data work.someage work.toage;
   set data.allevent;
   if centre not in (14,25); * Exclude Luxembourg and Heidelberg;
* Age;
   if 35<=age<=39 then agegrp=1; 
   else if 40<=age<=44 then agegrp=2; 
   else if 45<=age<=49 then agegrp=3; 
   else if 50<=age<=54 then agegrp=4; 
   else if 55<=age<=59 then agegrp=5; 
   else if 60<=age<=64 then agegrp=6; 
   if agegrp=. then output work.toage;
   else output work.someage;
run;
* Event #1;
data work.event(drop=f1 f2 f9 def1 nf1) work.toevent;
   set work.someage;
* Definition 1;
   if diacat=1 and surviv in (1,9) then NF1=1; else NF1=0;
   if diacat=1 and surviv=2 then F1=1; else F1=0;
   if diacat=2 and surviv=2 then F2=1; else F2=0;
   if diacat=9 and surviv=2 then F9=1; else F9=0;
   def1=NF1+F1+F2+F9;
* fatal/non-fatal;
   if def1=0 then output work.toevent;
   else do;
      if NF1=1 then event="non-fatal";
      else if (F1=1 or F2=1 or F9=1) then event="fatal"; 
      output work.event;
   end;
run;
* Gender;
data work.male work.female;
   set work.event;
   if sex=1 then output work.male;
   else if sex=2 then output work.female;
run;

** Calculate age standardized event rate for males;
* Male event count (both fatal and non-fatal);
proc freq data=work.male noprint;
   table centre*runit*yronset*mthonset*event*agegrp / out=work.freqcntm list nopercent nocum;
run;
* Combine male coronary event data and demographic data;
proc sort data=work.freqcntm(rename=(yronset=year));
   by centre runit year mthonset;
run; 
data work.malebine; *<- merge demographic data to centre;
   merge work.freqcntm(drop=percent) work.demgm;
   by centre runit year; 
run;
/*
1. Assign weight to each age group according to WHO criteria;
2. variable "count" is in data set freqcntm. It is the frequency 
   of each combination of event*centre*runit*onsetyr*onsetmth*agegrp. */
data work.malerate(drop=count age35--age60);
   set work.malebine;
* Event and fatality weighting;
   if agegrp=1 then rate=(count/age35)*(6/31)*100000;
   if agegrp=2 then rate=(count/age40)*(6/31)*100000;
   if agegrp=3 then rate=(count/age45)*(6/31)*100000;
   if agegrp=4 then rate=(count/age50)*(5/31)*100000;
   if agegrp=5 then rate=(count/age55)*(4/31)*100000;
   if agegrp=6 then rate=(count/age60)*(4/31)*100000;
run;
** Weight months;
* Create data set of years and months to correctly account for leap years;
* Get the minimum and maximum year for each centre;
proc univariate data=work.malerate noprint;
   by centre runit;
   var year;
   output out=work.cendates min=minyr max=maxyr;
run;
data work.firlast(drop=minyr maxyr);
   set work.cendates;
   by centre runit;
   if first.runit then do;
      dates=input("0101"||trim(left(minyr)),ddmmyy8.);
      dummy=1;
      output;
      dates=input("0101"||trim(left(maxyr+1)),ddmmyy8.);
      dummy=1;
      output;
   end;
run;
* Ignore warning in LOG;
proc expand data=work.firlast from=year to=day out=work.full observed=(B,E);
   by centre runit;
   convert dummy=x;
   id dates;
run;
data work.datem;
   set work.full(drop=x);
   by centre runit;
   year=year(dates);
   mthonset=month(dates);
run;
* Get rid of unwanted extra year and output seperate sets for men and women;
data work.unwant work.unwantw;
   set work.datem;
   length event $ 9.;
   by centre runit year;
   if last.runit then do;
      if not last.year;
   end;
   event='fatal'; *<- count for both event types;
   output work.unwant;
   event='non-fatal';
   output work.unwant;
   if centre~=50 then do;
      event='fatal';
      output work.unwantw;
      event='non-fatal';
      output work.unwantw;
   end;
run;
* #1 Get month counts;
proc sort data=work.unwant;
   by centre runit event;
proc freq data=work.unwant noprint;
   by centre runit event;
   table year*mthonset / out=work.mthcount(drop=percent rename=(count=mthcount));
run;
* #2 Get year counts;
*proc freq data=work.unwant noprint;
*   by centre runit event;
*   table year / out=work.yrcount(drop=percent rename=(count=yrcount));
*run;
data work.mthyr;
*   merge work.mthcount work.yrcount;
*   by centre runit event year;
   set work.mthcount;
   yrcount=365.25; * Consistent standardising;
run;
* Standardise rates by the number of days in a month;
proc sort data=work.mthyr;
   by centre runit year mthonset event;
data work.mnthwght;
   merge work.malerate(in=a) work.mthyr(in=b);
   by centre runit year mthonset event;
   if b and not a then rate=0;
   mthwght=(yrcount/mthcount)/12; *<-weight each month to a standard month length;
   mthstan=rate*mthwght;
run;
* Split across age groups;
data work.split;
   set work.mnthwght;
   if agegrp<=4 then agex=1; * Aged up to 54;
   else agex=2;
run;
proc summary data=work.split nway;
   class centre runit year mthonset agex;
   var mthstan; 
   output out=data.magespl(drop=_type_ _freq_) sum=ratestd;
run;
/*Calculate age standardized event rate for male by centre, year, month 
and event outcome (fatal or non-fatal) by summing across age groups; */
proc summary data=work.mnthwght nway;
   class centre runit year mthonset event;
   var mthstan;
   output out=data.malerate(drop=_type_ _freq_) sum=ratestd;
run; 

* Repeat above for women;
* Female event count (both fatal and non-fatal);
proc freq data=work.female noprint;
   table centre*runit*yronset*mthonset*event*agegrp / out=work.freqcntw list nopercent nocum;
run;
* Combine female coronary event data and demographic data;
proc sort data=work.freqcntw(rename=(yronset=year));
   by centre runit year mthonset;
run; 
data work.fembine; *<- merge demographic data to centre;
   merge work.freqcntw(drop=percent) work.demgf;
   by centre runit year; 
run;
/*
1. Assign weight to each age group according to WHO criteria;
2. variable "count" is in data set freqcntm. It is the frequency 
   of each combination of event*centre*runit*onsetyr*onsetmth*agegrp. */
data work.femrate(drop=count age35--age60);
   set work.fembine;
* Event and fatality weighting;
   if agegrp=1 then rate=(count/age35)*(6/31)*100000;
   if agegrp=2 then rate=(count/age40)*(6/31)*100000;
   if agegrp=3 then rate=(count/age45)*(6/31)*100000;
   if agegrp=4 then rate=(count/age50)*(5/31)*100000;
   if agegrp=5 then rate=(count/age55)*(4/31)*100000;
   if agegrp=6 then rate=(count/age60)*(4/31)*100000;
run;
** Weight months;
* #1 Get month counts;
proc sort data=work.unwantw;
   by centre runit event;
proc freq data=work.unwantw noprint;
   by centre runit event;
   table year*mthonset / out=work.mthcount(drop=percent rename=(count=mthcount));
run;
* #2 Get year counts;
proc freq data=work.unwantw noprint;
   by centre runit event;
   table year / out=work.yrcount(drop=percent rename=(count=yrcount));
run;
data work.mthyr;
   merge work.mthcount work.yrcount;
   by centre runit event year;
run;
* Standardise rates by the number of days in a month;
proc sort data=work.mthyr;
   by centre runit year mthonset event;
data work.mnthwght(drop=rate yrcount mthcount mthwght);
   merge work.femrate(in=a) work.mthyr(in=b);
   by centre runit year mthonset event;
   if b and not a then rate=0;
   mthwght=(yrcount/mthcount)/12; *<-weight each month to a standard month length;
   mthstan=rate*mthwght;
run;
/*Calculate age standardized event rate for male by centre, year, month 
and event outcome (fatal or non-fatal) by summing across age groups; */
proc summary data=work.mnthwght nway;
   class centre runit year mthonset event;
   var mthstan;
   output out=data.femrate(drop=_type_ _freq_) sum=ratestd;
run; 

* Combine male and female rates;
data data.all;
   set data.malerate(in=male) data.femrate;
   if male then sex=1; 
   else sex=2;
run;
* Combine fatal and non-fatal event rate;
proc summary data=data.all nway;
   class centre runit year mthonset sex;
   var ratestd; 
   output out=data.sumevent(drop=_type_ _freq_) sum=ratestd;
run;
* Combine across gender;
proc summary data=data.all nway;
   class centre runit year mthonset event;
   var ratestd; 
   output out=data.sumsex(drop=_type_ _freq_) sum=ratestd;
run;
* Combine across month;
proc summary data=data.all nway;
   class centre runit year mthonset;
   var ratestd; 
   output out=data.summonth(drop=_type_ _freq_) sum=ratestd;
run;
